%% cleanup
clear all
close all
clc

addpath("C:\joshFunctionsMatlab\")

%% 1 - three dates to venus
clear all

au = 149598000;

mu_sun = 132712440018;

mu_e = 398600;
mu_v = 324859;

r_e = 6378; % km
r_v = 6052; % km

tString = "January 1, 2023";
t = datetime(tString);
[jd(1),~ ,~, ~, ~, ~, T0] =joshJulian(t);

tString = "April 1, 2023";
t = datetime(tString);
% [~,~,T1]= joshJulian(t);
[jd(2),~ ,~, ~, ~, ~, T1] =joshJulian(t);
tString = "May 1, 2023";
t = datetime(tString);
% [~,~,T2]= joshJulian(t);
[jd(3),~ ,~, ~, ~, ~, T2] =joshJulian(t);
tString = "June 1, 2023";
t = datetime(tString);
% [~,~,T3]= joshJulian(t);
[jd(4),~ ,~, ~, ~, ~, T3] =joshJulian(t);
clear t tString



[coes(:,1)] = abercrombyAERO351planetary_elements2(3,T0);
[coes(:,2)] = abercrombyAERO351planetary_elements2(2,T1);
[coes(:,3)] = abercrombyAERO351planetary_elements2(2,T2);
[coes(:,4)] = abercrombyAERO351planetary_elements2(2,T3);

[coes(:,5)] = abercrombyAERO351planetary_elements2(3,T3);
[coes(:,6)] = abercrombyAERO351planetary_elements2(2,T0);


for i =1:6
    a(i) = coes(1,i);
    ecc(i) = coes(2,i);
    inc(i) = deg2rad(coes(3,i));
    raan(i) = deg2rad(coes(4,i));
    w_hat(i) = deg2rad(coes(5,i));
    L(i) = deg2rad(coes(6,i));
    aop(i) = (w_hat(i)-raan(i));
    Me(i) = (L(i) - w_hat(i));
    [theta(i),~,E(i)] = joshAnomalyCalculator(ecc(i),Me(i),"Me");
    [r(:,i),v(:,i)]=joshCOE2rv(a(i),ecc(i),theta(i),inc(i),raan(i),aop(i),mu_sun);
end
clear a ecc inc raan w_hat aop Me


for i = 2:4
    dt = (jd(i)-jd(1))*24*3600;
    [v1(:,i-1),v2(:,i-1)] = joshIntegratedLamberts(r(:,1),r(:,i),dt,"pro",mu_sun);
    [v1(:,i+2),v2(:,i+2)] = joshIntegratedLamberts(r(:,1),r(:,i),dt,"retro",mu_sun);
end

for i = 1:3
    vinf(:,i) = [norm(v(:,1)-v1(:,i));norm(v(:,i+1)-v2(:,i))]; % from pro
    vinf(:,i+3) = [norm(v(:,1)-v1(:,i+3));norm(v(:,i+1)-v2(:,i+3))]; % from retro
end

rp_d = 500+r_e;
rp_a = 200+r_v;
ra_a = 10000+r_v;
vbo_a = sqrt(vinf(1,:).^2+2*mu_v/rp_a);
vbo_d = sqrt(vinf(2,:).^2+2*mu_e/rp_d);

ecc_a = (ra_a-rp_a)/(ra_a+rp_a);
vp_d = sqrt(mu_e/rp_d);
h_a = sqrt(rp_a*mu_v*(1-ecc_a^2));

dv_d = vbo_d-vinf(1,:);
dv_a = vbo_a-vinf(1,:);

dv = [dv_d;dv_a];
for i = 1:6
    dvtot(i) = sum(dv(:,i));
end


X={};
% [~,~,~,X{1}]=joshOrbitCoastOde(r(:,1),v(:,1),(jd(4)-jd(1))*24*3600,mu_sun); % planets coasting
% [~,~,~,X{2}]=joshOrbitCoastOde(r(:,6),v(:,6),(jd(4)-jd(1))*24*3600,mu_sun);


for i = 1:3
    [~,~,~,X{i+2}]=joshOrbitCoastOde(r(:,1),v1(:,i),(jd(i+1)-jd(1))*24*3600,mu_sun); % spacecraft coasting
    [~,~,~,X{i+5}]=joshOrbitCoastOde(r(:,1),v1(:,i+3),(jd(i+1)-jd(1))*24*3600,mu_sun); % spacecraft coasting
end

myString = ["April 1, 2023","May 1, 2023","June 1, 2023"];
myString = ["Prograde - " + myString,"Retrograde - " + myString];

for i = 3:8
    figure
    title("Lamberts Arrival - "+myString(i-2))
    hold on

    scatter3(r(1,1),r(2,1),r(3,1),'blue','+')
    scatter3(r(1,2:4),r(2,2:4),r(3,2:4),'black','*')
    scatter3(0,0,0,'red','filled')

    scatter3(r(1,5),r(2,5),r(3,5),'cyan','+')
    scatter3(r(1,6),r(2,6),r(3,6),'magenta','*')
    plot3(X{i}(:,1),X{i}(:,2),X{i}(:,3))

    axis('equal')
    xlabel("x [km]")
    ylabel("y [km]")
    zlabel("z [km]")
    xlim(1.2*au*[-1, 1])
    ylim(1.2*au*[-1, 1])
    zlim(1.2*au*[-1, 1])
    scatter3(r(1,1),r(2,1),r(3,1),'blue','o')
    scatter3(r(1,5),r(2,5),r(3,5),'cyan','o')
    legend("Earth","Venus","Sun","Earth T0","Venus T0")
end


[a,ecc,theta,inc,raan,aop,h,T,E] =joshCOE(r(:,1),v1(:,4),mu_sun,"magnitude");

ra = norm(r(:,1));
rp = a*2-ra;
r_sun =  696000;

[m,i]=min(dvtot);

disp("------------P1------------")
disp("My workings for this problem have the following results:")
disp("The minimum dv for the trip is "+string(m)+" km/s with the mission plan: "+myString(i))
disp("The all possible dvs are as follows: ")
disp((myString+" - "+dvtot+" km/s")')
disp("the radius of perihelion of the mission plan "+myString(4)+" is: "+string(rp)+" km, which is "+string(abs(r_sun-rp))+" km under the surface of the sun, so I wouldn't fly that one.")
disp("H/C: Best dv happens on date closest to Hohmaan, i.e. closest to 180 degrees from eachother")
disp("H/C: long/retrograde method is more expensive in dv than prograde.")






%% 2 - flyby
clear all
mu_e = 398600;
mu_h = 132712440018;
r_e = 6378; % km

yr = 365.242*24*3600; % sec in a year
T = (3/4)*yr;
rah = 149598000;

ah = (T*sqrt(mu_h)/(2*pi))^(2/3);
rph = 2*ah-rah;
ecch = (rah-rph)/(rah+rph);

h0 = sqrt(ah*(1-ecch^2)*mu_h);

vah = h0/rah;
vah = [0;vah];
v0 = norm(vah);

ve = sqrt(mu_h/rah);
ve = [0;ve];

vinf1 = vah-ve;

zpe = 10000;
rpe = zpe+r_e;

ecce = 1+(rpe*norm(vinf1)^2)/mu_e;
beta = acos(1/ecce);

vinf2 = norm(vinf1)*[-sin(2*beta);cos(2*beta)];

vh2 = vinf2+ve;
finalSpeed = norm(vh2);
dv = norm(vh2-vah);

disp("------------P2------------")
disp("My workings for this problem have the following results:")
disp("The resulting heliocentric speed is: "+string(finalSpeed)+" km/s")
disp("The dv of this this manuver is: "+string(dv)+" km/s")
disp("The change in heliocentric speed is: "+string(finalSpeed-norm(vah))+" km/s, so the s/c is going faster after the flyby.")
disp("H/C: increase in heliocentric speed makes sense for a trailing edge flyby")
disp("H/C: dv is within ranges we'd expect for an Earth flyby")
%% 3 - deorbit, nonimpulsive
clear all
r_e = 6378; % km

ISP = 5000;
r0 = [26578;0;0];
v0 = [0;3.8726;0];
m0 = 600; %kg
X0 = [r0;v0;m0];

figure
hold on
axis('equal')


options = odeset('RelTol', 1e-8,'AbsTol',1e-13);
[t,X] = ode45(@orbitODEFun,[0,3*24*60*60],X0,options,1);
Xs = [X];
ts = [t];
X0 = Xs(end,:);
plot3(X(:,1),X(:,2),X(:,3))


[t,X] = ode45(@orbitODEFun,[0,4*24*60*60],X0,options,0);
Xs = [Xs;X];
ts = [ts;t+ts(end)];
X0 = Xs(end,:);
plot3(X(:,1),X(:,2),X(:,3))



[t,X] = ode45(@orbitODEFun,[0,1*24*60*60],X0,options,1);
Xs = [Xs;X];
ts = [ts;t+ts(end)];
plot3(X(:,1),X(:,2),X(:,3))
legend("burn1","coast","burn2")

X = Xs(end,:);
rfinal = norm(Xs(end,1:3));
zfinal = rfinal-r_e;
mfinal = X(7);
disp("------------P3------------")
disp("My workings for this problem have the following results:")
disp("The final altitude of the spacecraft is: "+string(zfinal)+" km/s, so it is still orbiting.")
disp("The final mass of the spacecraft is "+string(mfinal)+" kg, which is "+string(m0-mfinal)+" kg less than the initial mass.")
disp("H/C: the final altitude is lower which is expected for a deorbit.")
disp("H/C: the final mass is lower which is expected for consuming fuel.")
disp("H/C: the trajectory is a fairly circular spiral which is expected for low thrust/long duration burns.")


%% 4 - multiburn escape
clear all
mu_e = 398600;
r_e = 6378; % km
z0 = 200;

r0 = r_e+z0; % initial r
v0 = sqrt(mu_e/r0);
vinf = sqrt(2)*v0; % vescape = root(2)*vcirc
vinc = 1.075; % incremental increase in v at each perigee
vinf = vinf-v0; % total dv required
n = ceil(vinf/vinc); % the number of vinc burns needed at perigee to escape. rounded up since partial burns don't make sense

vp1 = v0+vinc; % velocity after first burn
vp2 = v0+2*vinc; % velocity after second burn
% vp3 = v0+2*vinc; % velocity after thrid burn - not needed since problem ends after 3rd burn

[~,~,~,~,~,~,~,T1] = joshCOE(r0,vp1,mu_e,'magnitude');
[~,~,~,~,~,~,~,T2] = joshCOE(r0,vp2,mu_e,'magnitude');
totTime = T1+T2;
totTime= totTime/(60*60); % hrs
disp("------------P4------------")
disp("My workings for this problem have the following results:")
disp("The spacecraft will require "+string(n)+" burns to escape.")
disp("The total time from the first burn to the last is: "+string(totTime)+" hrs.")
disp("H/C this time seems reasonable for middle altitude orbits.")


%% 5 - ecc in terms of c
disp("------------P5------------")
disp("My workings for this problem have the following results:")
disp("I used symbolic mathtoolbox to keep track of my variables.")
syms c va rp ra
disp("From problem statement:")
vp = c*va
disp("ecc formula:")
ecc = (ra-rp)/(ra+rp)
disp("Solve for ra in terms of other vars from h formula:")
h = va*ra == vp*rp
ra = solve(h,ra)
disp("plug ra and into rp into ecc formula:")
ecc = subs(ecc)
disp("simplify to find ecc in terms of c:")
ecc = simplify(ecc)
disp("H/C: ecc is only in terms of c")
%% 6 - trip to neptune Tsyn
T_e = 365.256; %days 
T_n= 164.8; %earth years 
T_n = T_n*T_e; %days
T_e = T_e*24*3600; % seconds
T_n = T_n*24*3600; % seconds

r_n = 4.495e9; %km 
r_e = 149.6e6; %km 
mu_sun = 132.71*10^9; %km^3/s^2

n_e = 0.9856; %deg/day 
n_e = n_e/(24*3600); % deg/s
n_e = deg2rad(n_e); % rad/s

n_n = 0.0060; %deg/day 
n_n = n_n/(24*3600); % deg/s
n_n = deg2rad(n_n); % rad/s


Tsyn = 2*pi/(n_e-n_n);
% Tsyn = Tsyn/(24*3600) %solar days

v_e = sqrt(mu_sun/r_e);
v_n = sqrt(mu_sun/r_n);

[dv1,dv2,dv,T,ht,ecct,vt1,vt2] = joshHomann(r_e,v_e,r_n,v_n,mu_sun);

dtheta_e = n_e*T;
dtheta_n = n_n*T;

theta1_e = 0;
[~,theta2_e] = joshQuadrant(dtheta_e);

theta1_n = pi-dtheta_n;
theta2_n = pi;

nLeadDepart = theta1_n - theta1_e;
nLeadArrive = theta2_n-theta2_e;

n_rel = n_e-n_n;
dtheta_en1 = 2*pi+nLeadArrive;
thetaCatchup = dtheta_en1-nLeadDepart;
Twait = thetaCatchup/n_rel;

disp("------------P6------------")
disp("My workings for this problem have the following results:")
disp("The synodic period of Neptune relative to Eath: "+string(Tsyn)+" days")


%% dependancies


%% funcitons
% function [r,v] = prop(r0,v0,dt)
%     X0 = [r0;v0];
%     options = odeset('RelTol', 1e-8,'AbsTol',1e-13);
%     [~,X] = ode45(@orbitODEFun,[0,dt],X0,options);
%     X = X(end,:);
%     r = X(1:3)';
%     v = X(4:6)';
% end

function Xdot = orbitODEFun(t,X,burn)
mu = 398600;
g0 =  9.80665; % m/s^2
g0 = g0/1000; % km/s^2
ISP = 5000;

r = X(1:3);
v = X(4:6);
m = X(7);
uv = v/norm(v);
if burn
    T = 6; % N = kg.m/s^s
    T = T/1000; % kN = kg.km/s^2
else
    T = 0;
end
mdot = -T/(ISP*g0);
vdot = (-mu/norm(r)^3)*r - (T/m)*uv; % minus because retrograde burn
(T/m)*uv;
rdot = v;

Xdot = [rdot;vdot;mdot];
end


